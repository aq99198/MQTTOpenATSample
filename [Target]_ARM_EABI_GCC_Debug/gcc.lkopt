
/* The linker command script */

/* Set the memory mapping */
MEMORY
{
   ROM_MAP (rx)   : ORIGIN = 0x002A0000, LENGTH = 20480k
   RAM_MAP (!rx)  : ORIGIN = 0x18100000, LENGTH = 20480k
}
PHDRS
{
   appli_code PT_LOAD;
   appli_ram PT_LOAD;
}

SECTIONS
{
   .oat_header :
   {
      mos_header.o ( .rodata* OAT_HEADER_AREA* )
   } > ROM_MAP :appli_code

   .text :
   {
      /* RO and ER_RO symbols are provided for legacy OS support */
      /* define the value of the begin of code section */
      PROVIDE(Image$$APP_RO$$Base = .);
      PROVIDE(Image$$RO$$Base = .);
      *(.text .text.* i.*)
      . = ALIGN(4);
      *( .glue_7t )
      . = ALIGN(4);
      *( .glue_7 )
      . = ALIGN(4);
      *( .ctors )
      . = ALIGN(4);
      *( .dtors )
      . = ALIGN(4);
      *( .gnu.linkonce.t.* )
      *( .gnu.linkonce.r.* )
      . = ALIGN(4);
      *( .gcc_except_table )
      *( .init_array )
      . = ALIGN(4);
      *( .rodata* .constdata* .conststring*  )
      /* define the value of the end of code section */
      PROVIDE(Image$$APP_RO$$Limit = .);
      PROVIDE(Image$$RO$$Limit = .);
      _etext = .;
      __exidx_start = .;
      __exidx_end = .;
      __dso_handle = .;
   } > ROM_MAP :appli_code

  .data :
   {
      /* RW and ER_RW symbols are provided for legacy OS support */
      /* define the value of the begin of data initialized section */
      PROVIDE(Image$$APP_DATA$$Base = .);
      PROVIDE(Image$$RW$$Base = .);
      *(.data .data.* .gnu.linkonce.d.* )
      /* define the value of the end of data initialized section */
      PROVIDE(Image$$APP_DATA$$Limit = .);
      PROVIDE(Image$$RW$$Limit = .);
   } > RAM_MAP :appli_ram

   .bss :
   {
      /* ZI symbol is provided for legacy OS support */
      /* define the value of the begin of data zero initialized section */
      PROVIDE(Image$$APP_BSS$$Base = .);
      PROVIDE(Image$$ZI$$Base = .);
      *(.bss .bss.* .gnu.linkonce.b.* )
      *( COMMON )
      /* define the value of the end of data zero initialized section */
      PROVIDE(Image$$APP_BSS$$Limit = .);
      PROVIDE(Image$$ZI$$Limit = .);
   } > RAM_MAP :appli_ram

   .uninit (NOLOAD) :
   {
      /* define the value of the begin of uninitialized section */
      PROVIDE(Image$$APP_UNINIT$$Base = .);
      * (UNINIT )
      /* define the value of the end of uninitialized section */
      PROVIDE(Image$$APP_UNINIT$$Limit = .);
      PROVIDE(end = .);
   } > RAM_MAP :appli_ram

   . = ALIGN(4);

   /DISCARD/ (NOLOAD) :
   {
      *(*exidx*)
      *(.ARM.attributes)
   }
}

/* define the length of the code section */
PROVIDE(Image$$ER_RO$$Length = (Image$$APP_RO$$Limit - Image$$APP_RO$$Base));
PROVIDE(Image$$APP_RO$$Length = (Image$$APP_RO$$Limit - Image$$APP_RO$$Base));

/* define the length of the data initialized section */
PROVIDE(Image$$APP_DATA$$Length = (Image$$APP_DATA$$Limit - Image$$APP_DATA$$Base));
PROVIDE(Image$$ER_RW$$Length = (Image$$APP_DATA$$Limit - Image$$APP_DATA$$Base));

/* define the length of the data zero initialized section */
PROVIDE(Image$$APP_BSS$$ZI$$Length = (Image$$APP_BSS$$Limit - Image$$APP_BSS$$Base));
PROVIDE(Image$$ER_ZI$$ZI$$Length = (Image$$APP_BSS$$Limit - Image$$APP_BSS$$Base));

/* define the length of the uninitialized section */
PROVIDE(Image$$APP_UNINIT$$ZI$$Length = (Image$$APP_UNINIT$$Limit - Image$$APP_UNINIT$$Base));
